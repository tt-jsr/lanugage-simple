
%{
/* need this for the call to atof() below */
#include <math.h>
#pragma warning(disable : 4996)
#define MAX_STR_CONST 1024
%}

%option noyywrap
%x       str

DIGIT    [0-9]
ID       [a-zA-Z][a-zA-Z0-9]*

%%

    char string_buf[MAX_STR_CONST];
    char *string_buf_ptr;
     
     
\"      string_buf_ptr = string_buf; BEGIN(str);

<str>\"        { /* saw closing quote - all done */
         BEGIN(INITIAL);
         *string_buf_ptr = '\0';
         printf ("Literal: %s\n", string_buf);
         /* return string constant token type and
          * value to parser
          */
         }

<str>\n        {
         /* error - unterminated string constant */
         /* generate error message */
         }

<str>\\[0-7]{1,3} {
         /* octal escape sequence */
         int result;

         (void) sscanf( yytext + 1, "%o", &result );

         if ( result > 0xff )
                 /* error, constant is out-of-bounds */

         *string_buf_ptr++ = result;
         }

<str>\\[0-9]+ {
         /* generate error - bad escape sequence; something
          * like '\48' or '\0777777'
          */
         }

<str>\\n  *string_buf_ptr++ = '\n';
<str>\\t  *string_buf_ptr++ = '\t';
<str>\\r  *string_buf_ptr++ = '\r';
<str>\\b  *string_buf_ptr++ = '\b';
<str>\\f  *string_buf_ptr++ = '\f';

<str>\\(.|\n)  *string_buf_ptr++ = yytext[1];

<str>[^\\\n\"]+        {
         char *yptr = yytext;

         while ( *yptr )
                 *string_buf_ptr++ = *yptr++;
         }


{DIGIT}+    {
        printf( "An integer: %s (%d)\n", yytext,
        atoi( yytext ) );
    }

{DIGIT}+"."{DIGIT}*        {
        printf( "A float: %s (%g)\n", yytext, atof( yytext ) );
    }

if|then|begin|end|procedure|function|end        {
        printf( "A keyword: %s\n", yytext );
    }

{ID}        printf( "An identifier: %s\n", yytext );

"*"|"/"|"="|"<="|">="|"<"|">"   printf( "An operator: %s\n", yytext );

"{"[\^{}}\n]*"}"     /* eat up one-line comments */

[ \t\n]+          /* eat up whitespace */

.           printf( "Unrecognized character: %s\n", yytext );

%%

int _yywrap() {return 0;}

void Parse(const char *filename)
{
    /*yyin = fopen( filename, "r" );*/
    int e = fopen_s(&yyin,  filename, "r" );

    yylex();
}

